{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","Helper/getGifts.js","Components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","GifGridItem","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","setImages","useEffect","then","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAS,IACtBP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAA0BM,OACxCL,EAAc,MAKhB,SACE,uBAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAdrB,SAACN,GACpBF,EAAcE,EAAEO,OAAOF,a,QCJdG,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEnC,OADAC,QAAQC,IAAIH,EAAOC,GAEjB,sBAAKG,UAAU,OAAf,UACE,qBAAKC,IAAKJ,EAAKK,IAAKN,IACpB,4BAAIA,Q,uBCPGO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfR,EADe,iDACiCS,UACpDF,GAFmB,yDAIFG,MAAMV,GAJJ,cAIfW,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACRZ,QAAQC,IAAIW,GAENC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIE,OAAOC,iBAAiBnB,QAZhB,kBAgBdc,GAhBc,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,EACXrB,mBAAS,IADE,mBAChCgC,EADgC,KACxBG,EADwB,KASvC,OANAC,qBAAU,WACRhB,EAAQC,GAAUgB,KAAKF,KACtB,CAACd,IAEJN,QAAQC,IAAIK,GAGV,qCACE,6BAAKA,IACL,qBAAKJ,UAAU,YAAf,SACGe,EAAOH,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCd1BO,EAAe,WAAO,IAAD,EACItC,mBAAS,CAAC,SADd,mBACzBuC,EADyB,KACbxC,EADa,KAEhC,OACE,gCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACGwC,EAAWV,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPxBmB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.c236034e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const hundleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const hundleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={hundleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={hundleChange} />\n    </form>\n  );\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  console.log(title, url);\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&10&api_key=UYMdktl9V9XLCebJ7NXNyOvoGnnFShVa`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  console.log(data);\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { getGifs } from \"../Helper/getGifts\";\n\nexport const GifGrid = ({ category }) => {\n  const [images, setImages] = useState([]);\n\n  useEffect(() => {\n    getGifs(category).then(setImages);\n  }, [category]);\n\n  console.log(category);\n\n  return (\n    <>\n      <h2>{category}</h2>\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./Components/AddCategory\";\nimport { GifGrid } from \"./Components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"goku\"]);\n  return (\n    <div>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}